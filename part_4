#include <asf.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "util/delay.h"

volatile char buffer[5];
volatile unsigned int b_index = 0;
volatile unsigned int edge1, edge2, diff, space_counter;

char decode(void);
void clearBuffer(void);

ISR(TIMER1_CAPT_vect) {
	// Count time, store in variable
	// Casework on time
	if (!(PINB & 0x01)) {
		edge1 = ICR1;		// Store time of first (falling) edge
		TCCR1B |= 0x40;		// Flip ICES1 bit, next capture on rising edge
		space_counter = ICR1 - space_counter;
		if (space_counter > 25000) {	// > 400 ms
			//space
			putchar(' ');
			putchar(decode());
			clearBuffer();
		}
	} 
	if (PINB & 0x01) {
		edge2 = ICR1;		// Store time of second (rising) edge
		diff = edge2 - edge1;	// For morse logic
		if (diff < 1875) {	// Ignore a rising edge <30 ms after a falling edge to prevent de-bouncing effects
		} else if (diff < 12500) { // Between 30 and 200 ms is a dot
			// Dot 
			buffer[b_index] = '.';		
			b_index++;				// Increment buffer index
			if (b_index > 4) {			// Case of overflowed buffer
				putchar(decode());
				clearBuffer();
			}
			PORTB = 0x10;				// Turn on PIN 12 LED
			_delay_ms(50);				// Allow delay to see flash
			PORTB &= ~(0x10);			// Turn off LED
		} else {	// Pressed for >200 ms is a dash
			// Dash
			buffer[b_index] = '-';
			b_index++;				// Increment buffer index
			if (b_index > 4) {
				putchar(decode());		
				clearBuffer();
			}
			PORTB = 0x08;				// Turn on Pin 11 LED
			_delay_ms(50);				// Allow delay to see flash
			PORTB &= ~(0x08);			// Turn off LED
		}
		space_counter = ICR1;
		TCCR1B &= ~(0x40);		// Set ICES1 bit to 0, next capture on falling edge
	}
}

int main (void)
{
	TIMSK1 = 0x20;		// Enable input capture interrupt
	DDRB = 0x20;		// Allow PB5 (PIN 13) to be an output pin on the Arduino
	uart_init();		// Initialize serial communication
	TCCR1B = 0x04;		// Select timer 1 with a prescaler of 256
				// Begin input capture on falling edge
	TIFR1 |= 0x20;		// Clear input capture flag at ICF1 bit in TIFR1
	sei();			// Enable interrupts globally
	while(1);		// Run program forever
}

// Helper function to reset buffer holding dots and dashes
void clearBuffer() {	
	int i;
	for (i = 0; i < 5; i++) {
		buffer[i] = 0;
	}
	b_index = 0;
}

// Helper function to decode the buffer holding sequences of dots, dashes, & spaces based on Morse code tree
char decode() {			
	if (buffer[0] == '.') {
		// E tree
		if (buffer[1] == '.') {
			// I tree
			if (buffer[2] == '.') {
				// S tree
				if (buffer[3] == '.') {
					// H tree
					if (buffer[4] == '.') {
						return('5');
						} else if (buffer[4] == '-') {
							return('4');
						} else {
							return('H');
						}
				} else if (buffer[3] == '-') {
					if (buffer[4] == '.') {
						// Do nothing
						return('\0');
					} else if (buffer[4] == '-') {
						return('3');
					} else {
						return('V');
					}
				} else {
					return('S');
				}
			} else if (buffer[2] == '-') {
				// U tree
				if (buffer[3] == '.') {
					// F tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('F');
					}
				} else if (buffer[3] == '-') {
					if (buffer[4] == '.') {
						// Do nothing
						return('\0');
					}
					else if (buffer[4] == '-') {
						return('2');
					}
					else {
						// Do nothing b/c (..--) is not a valid char sequence
						return('\0');
					}
				} else {
					return('U');
				}
			} else {
				return('I');
			}
		} else if (buffer[1] == '-') {
			// A tree
			if (buffer[2] == '.') {
				// R tree
				if (buffer[3] == '.') {
					// L tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('L');
					}
				} else if (buffer[3] == '-') {
					// Do nothing b/c (.-.-) is not a valid char sequence
					return('\0');
				} else {
					return('R');
				}
			} else if (buffer[2] == '-') {
				// W tree
				if (buffer[3] == '.') {
					// P tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('P');
					}
				} else if (buffer[3] == '-') {
					// J tree
					if (buffer[4] == '.') {
						// Do nothing b/c (.---.) is not a valid char sequence
						return('\0');
					} else if (buffer[4] == '-') {
						return('1');
					} else {
						return('J');
					}
				} else {
					return('W');
				}
			} else {
				return('A');
			}
		} else {
			return('E');
		}
	} else if (buffer[0] == '-') {
		// T tree
		if (buffer[1] == '.') {
			// N tree
			if (buffer[2] == '.') {
				// D tree
				if (buffer[3] == '.') {
					// B tree
					if (buffer[4] == '.') {
						return('6');
					} else if (buffer[4] == '-') {
						// Do nothing b/c (-...-) is not a valid char sequence
						return('\0');
					} else {
						return('B');
					}
				} else if (buffer[3] == '-') {
					// X tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('X');
					}
				} else {
					return('D');
				}
			} else if (buffer[2] == '-') {
				// K tree
				if (buffer[3] == '.') {
					// C tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('C');
					}
				} else if (buffer[3] == '-') {
					// Y tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('Y');
					}
				} else {
					return('K');
				}
			} else {
				return('N');
			}
		} else if (buffer[1] == '-') {
			// M tree
			if (buffer[2] == '.') {
				// G tree
				if (buffer[3] == '.') {
					// Z tree
					if (buffer[4] == '.') {
						return('7');
					} else if (buffer[4] == '-') {
						// Do nothing b/c (--..-) is not a valid char sequence
						return('\0');
					} else {
						return('Z');
					}
				} else if (buffer[3] == '-') {
					//q tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						// Do nothing
						return('\0');
					} else {
						return('Q');
					}
				} else {
					return('G');
				}
			} else if (buffer[2] == '-') {
				// O tree
				if (buffer[3] == '.') {
					// 8 tree
					if (buffer[4] == '.') {
						return('8');
					} else if (buffer[4] == '-') {
						// Do nothing b/c (---.-) is not a valid char sequence
						return('\0');
					} else {
						// Do nothing b/c (---.) is not a valid char sequence
						return('\0');
					}
				}
				else if (buffer[3] == '-') {
					// 9 & 0 trees
					if (buffer[4] == '.') {
						return('9');
					} else if (buffer[4] == '-') {
						return('0');
					} else {
						// Do nothing b/c (----) is not a valid char sequence
						return('\0');
					}
				} else {
					return('O');
				}
			} else {
				return('M');
			}
		} else {
			return('T');
		}
	}
	return('\0');
}







