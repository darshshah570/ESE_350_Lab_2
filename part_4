#include <asf.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "util/delay.h"

volatile unsigned int edge1, edge2, diff, space_counter;
volatile char buffer[5];
volatile unsigned int b_index = 0;

char decode(void);
void clearBuffer(void);

ISR(TIMER1_CAPT_vect) {
	//count time, store in variable
	//casework on time
	if (!(PINB & 0x01)) {
		//putchar('f');		//for debugging
		edge1 = ICR1;		//store time of first (falling) edge
		TCCR1B |= 0x40;		//flips ICES1 bit, next capture on rising bit
		space_counter = ICR1 - space_counter;
		if (space_counter > 25000) {	// 400 ms
			//space
			putchar(' ');
			putchar(decode());
			clearBuffer();
		}
	} 
	if (PINB & 0x01) {
		//putchar('r');		//for debugging
		edge2 = ICR1;		//store time of second (rising) edge
		diff = edge2-edge1;	//for morse logic
		if (diff < 1875) {	//ignore a rising edge that is less than 30 ms after a falling edge to for de-bouncing
		} else if (diff < 12500) { //between 30 and 200 ms is a dot
			//dot
			//putchar('.');
			buffer[b_index] = '.';		// case of index > 4
			b_index++;					
			if (b_index > 4) {
				putchar(decode());
				clearBuffer();
			}
			PORTB = 0x10;				//turn on pin 12 LED
			_delay_ms(50);
			PORTB &= ~(0x10);			//turn off
		} else {
			//dash
			//putchar('-');
			buffer[b_index] = '-';
			b_index++;					// increment index
			if (b_index > 4) {
				putchar(decode());		
				clearBuffer();
			}
			PORTB = 0x08;				//turn on pin 11 LED
			_delay_ms(50);
			PORTB &= ~(0x08);			//turn off
		}
		space_counter = ICR1;
		TCCR1B &= ~(0x40);		//sets ICES1 bit to 0, next capture on falling bit
	}
}

int main (void)
{
	TIMSK1 = 0x20;		//enable interrupt on input capture
	DDRB = 0x18;		//write enable pin 13
	uart_init();
	TCCR1B = 0x04;		//timer 1, prescaler of 256
				//input capture on falling edge
	TIFR1 |= 0x20;		//clear input capture flag
	sei();			//enable interrupts
	while(1);
}

void clearBuffer() {	//code to reset buffer holding dots and dashes
	int i;
	for (i = 0; i < 5; i++) {
		buffer[i] = 0;
	}
	b_index = 0;
}

char decode() {			//decodes the buffer holding sequences of dots, dashes, and spaces based on Morse code tree
	if (buffer[0] == '.') {
		//e tree
		if (buffer[1] == '.') {
			//i tree
			if (buffer[2] == '.') {
				//s tree
				if (buffer[3] == '.') {
					//h tree
					if (buffer[4] == '.') {
						return('5');
						} else if (buffer[4] == '-') {
						return('4');
						} else {
						return('H');
					}
					} else if (buffer[3] == '-') {
					if (buffer[4] == '.') {
						//do nothing
						return('\0');
						} else if (buffer[4] == '-') {
						return('3');
						} else {
						return('V');
					}
					} else {
					return('S');
				}
				} else if (buffer[2] == '-') {
				//u tree
				if (buffer[3] == '.') {
					//f tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('F');
					}
					} else if (buffer[3] == '-') {
					if (buffer[4] == '.') {
						//do nothing
						return('\0');
					}
					else if (buffer[4] == '-') {
						return('2');
					}
					else {
						//do nothing b/c (..--) is not a valid char sequence
						return('\0');
					}
					} else {
					return('U');
				}
				} else {
				return('I');
			}
			} else if (buffer[1] == '-') {
			//a tree
			if (buffer[2] == '.') {
				//r tree
				if (buffer[3] == '.') {
					//l tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('L');
					}
					} else if (buffer[3] == '-') {
					//do nothing b/c (.-.-) is not a valid char sequence
						return('\0');
					} else {
					return('R');
				}
				} else if (buffer[2] == '-') {
				//w tree
				if (buffer[3] == '.') {
					//p tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('P');
					}
					} else if (buffer[3] == '-') {
					//j tree
					if (buffer[4] == '.') {
						//do nothing b/c (.---.) is not a valid char sequence
						return('\0');
						} else if (buffer[4] == '-') {
						return('1');
						} else {
						return('J');
					}
					} else {
					return('W');
				}
				} else {
				return('A');
			}
			} else {
			return('E');
		}
		} else if (buffer[0] == '-') {
		//t tree
		if (buffer[1] == '.') {
			//n tree
			if (buffer[2] == '.') {
				//d tree
				if (buffer[3] == '.') {
					//b tree
					if (buffer[4] == '.') {
						return('6');
						} else if (buffer[4] == '-') {
						//do nothing b/c (-...-) is not a valid char sequence
						return('\0');
						} else {
						return('B');
					}
					} else if (buffer[3] == '-') {
					//x tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('X');
					}
					} else {
					return('D');
				}
				} else if (buffer[2] == '-') {
				//k tree
				if (buffer[3] == '.') {
					//c tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('C');
					}
					} else if (buffer[3] == '-') {
					//y tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('Y');
					}
					} else {
					return('K');
				}
				} else {
				return('N');
			}
			} else if (buffer[1] == '-') {
			//m tree
			if (buffer[2] == '.') {
				//g tree
				if (buffer[3] == '.') {
					//z tree
					if (buffer[4] == '.') {
						return('7');
						} else if (buffer[4] == '-') {
						//do nothing b/c (--..-) is not a valid char sequence
						return('\0');
						} else {
						return('Z');
					}
					} else if (buffer[3] == '-') {
					//q tree
					if ((buffer[4] == '.') || (buffer[4] == '-')) {
						//do nothing
						return('\0');
						} else {
						return('Q');
					}
					} else {
					return('G');
				}
				} else if (buffer[2] == '-') {
				//o tree
				if (buffer[3] == '.') {
					//8 tree
					if (buffer[4] == '.') {
						return('8');
						} else if (buffer[4] == '-') {
							//do nothing b/c (---.-) is not a valid char sequence
							return('\0');
						} else {
							//do nothing b/c (---.) is not a valid char sequence
							return('\0');
					}
				}
				else if (buffer[3] == '-') {
					//9,0 tree
					if (buffer[4] == '.') {
						return('9');
						} else if (buffer[4] == '-') {
						return('0');
						} else {
							//do nothing b/c (----) is not a valid char sequence
							return('\0');
					}
					} else {
					return('O');
				}
				} else {
				return('M');
			}
			} else {
			return('T');
		}
	}
	return('\0');
}







