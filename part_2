#include <asf.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "util/delay.h"

volatile unsigned int edge1, edge2, diff, space_counter; // Initialize all relevant variables

ISR(TIMER1_CAPT_vect) {
	// Falling edge logic, given that PB0 has a value of 0
	if !(PINB & 0x01) {
		edge1 = ICR1;				// Store timestamp of the first (falling) edge
		TCCR1B |= 0x40;				// Flip ICES1 bit, next capture will be on rising edge
		space_counter = ICR1 - space_counter;   // Determine if enough time has elapsed to qualify for a space
		if (space_counter > 25000) {
			// Write space to serial monitor 
			putchar(' ');
		}
	} 
	// Rising edge logic, given that PB0 has a value of 1
	if (PINB & 0x01) {
		edge2 = ICR1;		// Store timestamp of the second (rising) edge
		diff = edge2 - edge1;	// Determine the difference in time b/t falling and rising edges
		if (diff < 1875) {
			// Do nothing
		} else if (diff < 12500) {
			// Write dot to serial monitor 
			putchar('.');
		} else {
			// Write dash to serial monitor 
			putchar('-');
		}
		space_counter = ICR1;	// Reset space_counter
		TCCR1B &= ~(0x40);	// Flip ICES1 bit, next capture will be on falling edge
	}
}


int main (void)
{
	TIMSK1 = 0x20;		// Enable input capture interrupt
	DDRB = 0x20;		// Allow PB5 (PIN 13) to be an output pin on the Arduino
	uart_init();		// Initialize serial communication
	TCCR1B = 0x04;		// Select timer 1 with a prescaler of 256
				// Begin input capture on falling edge
	TIFR1 |= 0x20;		// Clear input capture flag at ICF1 bit in TIFR1
	sei();			// Enable interrupts globally
	while(1);		// Run program forever
}
